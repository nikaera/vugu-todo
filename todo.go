package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vugu"

type TodoData struct {
	Text      string
	Date      string
	TextStyle string
}

func (comp *Todo) NewData(props vugu.Props) (interface{}, error) {
	ret := &TodoData{}
	ret.Text, _ = props["text"].(string)
	ret.Date, _ = props["date"].(string)
	ret.TextStyle = "none"
	return ret, nil
}

func (data *TodoData) Done(event *vugu.DOMEvent) {
	ee := event.EventEnv()

	go func() {
		ee.Lock()
		defer ee.UnlockRender()

		done := event.JSEvent().Get("target").Get("checked").Bool()
		if done {
			data.TextStyle = "line-through"
		} else {
			data.TextStyle = "none"
		}
	}()
}

var _ vugu.ComponentType = (*Todo)(nil)

func (comp *Todo) BuildVDOM(dataI interface{}) (vdom *vugu.VGNode, css *vugu.VGNode, reterr error) {
	data := dataI.(*TodoData)
	_ = data
	_ = fmt.Sprint
	_ = reflect.Value{}
	event := vugu.DOMEventStub
	_ = event
	css = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", DataAtom: vugu.VGAtom(458501), Namespace: "", Attr: []vugu.VGAttribute(nil)}
	css.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n  .todo {\n    display: inline;\n  }\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)})
	var n *vugu.VGNode
	n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "todo"}}}
	vdom = n
	{
		parent := n
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "input", DataAtom: vugu.VGAtom(281349), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "type", Val: "checkbox"}, vugu.VGAttribute{Namespace: "", Key: "name", Val: "done"}}}
		parent.AppendChild(n)
		// @click = { data.Done(event) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.Done
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("Done"),
				Args:                  []interface{}{event},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.Done(event)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "span", DataAtom: vugu.VGAtom(40708), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n.InnerHTML = fmt.Sprint(data.Date + " -> " + data.Text)
		n.Props = vugu.Props{
			"style": "text-decoration:" + data.TextStyle,
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
	}
	return
}

type Todo struct {}

func init() { vugu.RegisterComponentType("todo", &Todo{}) }
